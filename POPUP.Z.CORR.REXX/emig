/* REXX */
/*--------------------------------------------------------------------*/
/*                      PopUp Mainframe Ltd                           */
/*                                                                    */
/*   COPYRIGHT ¸ 2020-2021 PopUp Mainframe Ltd ALL RIGHTS RESERVED    */
/*                                                                    */
/*          ( Corral datasets to / from Transport Volumes )           */
/*--------------------------------------------------------------------*/
/*****************************************************/
/* Accept parameters                                 */
/*****************************************************/
  parse arg hlq","filename

  if hlq = '' then
  do
     hlq = 'ADCDC.MY'
  end

/*****************************************************/
/* Record start date / time and DSN                  */
/*****************************************************/
  det. = ''
  det.1 = "Migrate Planner Start: "||DATE('S')||":"||TIME('N')

/*****************************************************/
/* Install dataset qualifier                         */
/*****************************************************/
  install = "POPUP.T.CORR"

/*****************************************************/
/* Allocate datasets                                 */
/*****************************************************/
/*****************************************************/
/* ERROR LOG                                         */
/*****************************************************/
  elog = "'"hlq||"."||filename||".ERRLOG'"
  DELETE elog PURGE

  "ALLOCATE FI(ERRLOG) DA("elog") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(130) BLKSIZE(1300)"


/*****************************************************/
/* DATASET LIST                                      */
/*****************************************************/
  inp = "'"hlq||"."||filename||"'"
  if SYSDSN(inp) /= OK then
  do
     say "ERROR      :DATASET LIST FILE" inp "DOES NOT EXIST"
     queue "ERROR      :DATASET LIST FILE" inp "DOES NOT EXIST"

     "EXECIO 1 DISKW ERRLOG"
     EXIT(4)
  end

  "ALLOCATE FI(INPDD) DA("inp") SHR"


/*****************************************************/
/* MIGRAT DETAILS                                    */
/*****************************************************/
  detailsdsn="'"||hlq||"."||filename||".FILEDETL'"
  DELETE detailsdsn PURGE

  /* write DETAILS file                              */
  "ALLOCATE FI(DETLS) DA("detailsdsn") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


/*****************************************************/
/* MIGRAT CSV                                        */
/*****************************************************/
  CSVdsn="'"hlq||"."||filename||".CSV'"
  DELETE CSVdsn PURGE

  /* write DETAILS file                              */
  "ALLOCATE FI(CSV) DA("CSVdsn") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(v,b) LRECL(704) BLKSIZE(7044)"

  call ADD_CSV_HEADERS


/*****************************************************/
/* DEFAULT JCL DATASETS                              */
/*****************************************************/
/*****************************************************/
/* JOBCARDS (source)                                 */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JOBCARDS)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM jobcard_source. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* JOBCARDP (PopUp)                                  */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JOBCARDP)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM jobcard_popup. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT VSAMEXP                                   */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JVSAMEXP)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM vsamexp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT VSAMIMP                                   */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JVSAMIMP)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end

  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM vsamimp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT PDSEEXP                                   */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JPDSEBTH)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM pdseexp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT PDSEIMP                                   */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JPDSEBTH)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM pdseimp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT PDSEXP                                    */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JPDSBTH)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM pdsexp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT PDSIMP                                    */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JPDSBTH)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM pdsimp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT PSEXP                                     */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JPSBTH)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM psexp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* DEFAULT PSIMP                                     */
/*****************************************************/
  defaultJCL =  "'"install".REXX(JPSBTH)'"
  if SYSDSN(defaultJCL) /= OK then
  do
     say "DATASET" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM psimp. FINIS"

  "FREE FI(JCLS)"


/*****************************************************/
/* xxxxxxx  - add more transfer types here           */
/*****************************************************/
  /* ... and the rest */
  /* ... and the rest */


/*****************************************************/
/* JCL & EXECs VSAM                                  */
/*****************************************************/
  corral_VSAM = "'"||hlq||"."||filename||".CORR.VSAM'"
  DELETE corral_VSAM PURGE

  "ALLOCATE FI(VSAMEXP) DA("corral_VSAM") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


  decorral_VSAM = "'"||hlq||"."||filename||".DECORR.VSAM'"
  DELETE decorral_VSAM PURGE

  "ALLOCATE FI(VSAMIMP) DA("decorral_VSAM") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


/*****************************************************/
/* JCL & EXECs PDSE                                  */
/*****************************************************/
  corral_PDSE = "'"||hlq||"."||filename||".CORR.PDSE'"
  DELETE corral_PDSE PURGE

  "ALLOCATE FI(PDSEEXP) DA("corral_PDSE") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


  decorral_PDSE = "'"||hlq||"."||filename||".DECORR.PDSE'"
  DELETE decorral_PDSE PURGE

  "ALLOCATE FI(PDSEIMP) DA("decorral_PDSE") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


/*****************************************************/
/* JCL & EXECs PDS                                   */
/*****************************************************/
  corral_PDS = "'"||hlq||"."||filename||".CORR.PDS'"
  DELETE corral_PDS PURGE

  "ALLOCATE FI(PDSEXP) DA("corral_PDS") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


  decorral_PDS = "'"||hlq||"."||filename||".DECORR.PDS'"
  DELETE decorral_PDS PURGE

  "ALLOCATE FI(PDSIMP) DA("decorral_PDS") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


/*****************************************************/
/* JCL & EXECs PS                                    */
/*****************************************************/
  corral_PS = "'"||hlq||"."||filename||".CORR.PS'"
  DELETE corral_PS PURGE

  "ALLOCATE FI(PSEXP) DA("corral_PS") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"


  decorral_PS = "'"||hlq||"."||filename||".DECORR.PS'"
  DELETE decorral_PS PURGE

  "ALLOCATE FI(PSIMP) DA("decorral_PS") NEW SPACE(1,1) DSORG(PS)",
  "RECFM(f,b) LRECL(80) BLKSIZE(800)"

/*****************************************************/
/* set defaults                                      */
/*****************************************************/
  default_tvol = ""

  default_smsmc = "DEFAULT"

  default_smssc = "SCBASE"

  default_smsdc = ""

  default_tprefix = hlq

  default_xfrtype = ""

  call PROCESS_TRANSPORT_VOLUMES


/*****************************************************/
/* MAIN LOOP                                         */
/* Process DATASET NAMES                             */
/*****************************************************/
  "EXECIO * DISKR INPDD (STEM datasets. FINIS"
  "FREE FI(INPDD)"

  saved_smssc.0 = 0
  saved_smsdc.0 = 0
  saved_smsmc.0 = 0
  vsam_dsn.0 = 0
  datarec_tvol_available = "N"

  do j = 1 to datasets.0

     dset=datasets.j
     dataset = ""
     xfrtype = ""
     tvolume = ""
     tprefix = ""
     smssc = ""
     smsmc = ""
     smsdc = ""
     popvol= ""

     parse var dset dataset dset

     do while dset /= ""

        parse var dset addparm dset
        select
           when substr(addparm,1,4) = "XFR=" then do
              xfrtype = substr(addparm,5)
              say "ERROR      :XFRTYPE not currently available!"
              queue "ERROR      :XFRTYPE not currently available!"

              "EXECIO 1 DISKW ERRLOG"
           end
           when substr(addparm,1,5) = "TVOL=" then,
                                      tvolume = substr(addparm,6,6)
           when substr(addparm,1,5) = "TPRX=" then,
                                      tprefix = substr(addparm,6)
           when substr(addparm,1,6) = "SMSSC=" then,
                                      smssc = substr(addparm,7)
           when substr(addparm,1,6) = "SMSDC=" then,
                                      smsdc = substr(addparm,7)
           when substr(addparm,1,6) = "SMSMC=" then,
                                      smsmc = substr(addparm,7)
           when substr(addparm,1,7) = "POPVOL=" then do
              addparm = addparm || " "
              popvol = substr(addparm,8)
           end
           otherwise do
              say "ERROR      :INVALID parameter:"addparm "ignored"
              queue "ERROR      :INVALID parameter:"addparm "ignored"

              "EXECIO 1 DISKW ERRLOG"
           end
        end

     end

     if dataset = "DEFAULT"  then do /* process default level */
        if popvol /= "" then do
          save_def_popup =popvol
        end
        else do
          save_def_popup= ""
        end

        if xfrtype /= "" then default_xfrtype = xfrtype
        if tvolume /= "" then default_tvol = tvolume
        if tprefix /= "" then default_tprefix = tprefix
        if smssc /= "" then default_smssc = smssc
        if smsdc /= "" then default_smsdc = smsdc
        if smsmc /= "" then default_smsmc = smsmc
     end

     else do /* process dataset level */

        if popvol = "" then do
           if save_def_popup = "" then do /* no popvol in input */
              smsenv ="Y"
           end
           else do /* popvol at default level available*/
              if smssc ="" & smsdc ="" & smsmc="" then do
                 smsenv = "N" /* no sms at dataset level */
                 popvol = save_def_popup /* use default level popvol*/
               end
               else do
                 smsenv = "Y" /*  sms at dataset level*/
               end
           end
        end
        else do
           smsenv = "N" /* popvol provided at dataset level*/
        end

        if tvolume="" then do
           datarec_tvol_available = "N"
        end
        else do
           datarec_tvol_available = "Y"
        end

        call PROCESS_DSN    /* process each dataset */

     end

end
/*****************************************************/
/* Write VOLUME summary                              */
/*****************************************************/
  queue ""
  queue "VOLUME, UNIT, FILES, SIZE(Gb), USED(bytes)"
  queue ""
  /* Row 1 = headers                                 */
  do i = 2 TO volumes.0
     queue volume.i","xunit.i","files.i","sizegb.i","used.i
  end
  queue ""
  queue ""

  out_lines = volumes.0 + 5 - 1
  "EXECIO "out_lines" DISKW CSV"

/*****************************************************/
/* Write SMSSC summary                               */
/*****************************************************/
  queue ""
  queue "SMSSTORCLASS (Required on PopUp)"
  queue ""
  do i = 1 TO saved_smssc.0
     queue saved_smssc.i
  end
  queue ""
  queue ""

  out_lines = saved_smssc.0 + 5
  "EXECIO "out_lines" DISKW CSV"

/*****************************************************/
/* Write SMSDC summary                               */
/*****************************************************/
  queue ""
  queue "SMSDATACLASS (Required on PopUp)"
  queue ""
  do i = 1 TO saved_smsdc.0
     queue saved_smsdc.i
  end
  queue ""
  queue ""

  out_lines = saved_smsdc.0 + 5
  "EXECIO "out_lines" DISKW CSV"

/*****************************************************/
/* Write SMSMC summary                               */
/*****************************************************/
  queue ""
  queue "SMSMGMTCLASS (Required on PopUp)"
  queue ""
  do i = 1 TO saved_smsmc.0
     queue saved_smsmc.i
  end
  queue ""
  queue ""

  out_lines = saved_smsmc.0 + 5
  "EXECIO "out_lines" DISKW CSV"

/*****************************************************/
/* Write DATASET / SMSSC / etc summary               */
/*****************************************************/
  queue ""
  queue "VSAM DATASET, SYSDATACLASS, SYSSTORCLASS, SYSMGMTCLASS"
  queue ""
  do i = 1 TO vsam_dsn.0
     queue vsam_dsn.i",",
           vsam_datacl.i",",
           vsam_storcl.i",",
           vsam_mgmtcl.i
  end
  queue ""
  queue "END"

  out_lines = vsam_dsn.0 + 5
  "EXECIO "out_lines" DISKW CSV"

  "EXECIO 0 DISKW DETLS (FINIS "
  "EXECIO 0 DISKW CSV (FINIS "
  "EXECIO 0 DISKW VSAMEXP (FINIS "
  "EXECIO 0 DISKW VSAMIMP (FINIS "
  "EXECIO 0 DISKW PDSEEXP (FINIS "
  "EXECIO 0 DISKW PDSEIMP (FINIS "
  "EXECIO 0 DISKW PDSEXP (FINIS "
  "EXECIO 0 DISKW PDSIMP (FINIS "
  "EXECIO 0 DISKW PSEXP (FINIS "
  "EXECIO 0 DISKW PSIMP (FINIS "
  "EXECIO 0 DISKW ERRLOG (FINIS "

  "FREE FI(ERRLOG) "
  "FREE FI(DETLS) "
  "FREE FI(CSV) "
  "FREE FI(VSAMEXP) "
  "FREE FI(VSAMIMP) "
  "FREE FI(PDSEEXP) "
  "FREE FI(PDSEIMP) "
  "FREE FI(PDSEXP) "
  "FREE FI(PDSIMP) "
  "FREE FI(PSEXP) "
  "FREE FI(PSIMP) "

  say " ***************************************"
  say " ************ COMPLETE *****************"
  say " ***************************************"
EXIT


PROCESS_DSN:
/*****************************************************/
/* Check if FILE exists                              */
/*****************************************************/
  skip_dataset = "N"
  dataset_fnd = "Y"

  if SYSDSN("'"||dataset||"'") /= OK then do
     queue "WARNING    :Dataset "dataset" DOES NOT EXIST"
     "EXECIO 1 DISKW ERRLOG"
      skip_dataset = "Y"
      dataset_fnd = "N"
  end

  if skip_dataset = "N" then do
     X=outtrap('lds.')
     address TSO "LISTDS ('"dataset"' ) "
     X=outtrap('OFF')
     rec_total = 0

     /* parse LISTCAT/LISTDSI output                 */
     dsn=lds.1

     if substr(lds.2,1,7) = '--LRECL' then do
        dsorg='VSAM'
        call LISTCAT
     end
     else do
        call DOLISTDSI
     end

  end

  if skip_dataset = "N" then do
     call DETERMINE_SMSPARMS
     call DETERMINE_TO_NAME
     call DETERMINE_TVOLUME
  end

  if skip_dataset = "N" then do
    call CREATE_EXECS
  end

  if dataset_fnd = "Y" then do
    call ADD_CSV
    call UPDATE_DETAILS
  end

RETURN


DETERMINE_SMSPARMS:

  if smssc = "" then do
     smssc = default_smssc
  end
  if smsmc = "" then do
     smsmc = default_smsmc
  end
  if smsdc = "" then do
     smsdc = default_smsdc
  end

RETURN


DETERMINE_TO_NAME:
/*****************************************************/
/* DETERMINE THE HIGH LEVEL QUALIFIER                */
/*****************************************************/
  /* assign (latest) default if not supplied at dataset level */
  if tprefix = "" then do
     tprefix = default_tprefix
  end

  DIFDSNAME = SYSDSNAME
  if tprefix /= "" then do
     /*replace hlq with tprefix*/
     parse value SYSDSNAME with orig_hlq"."remainder
     DIFDSNAME = tprefix"."remainder
  end

RETURN


DETERMINE_TVOLUME:
/*****************************************************/
/* DETERMINE THE TRANSPORT VOLUME TO BE USED         */
/*****************************************************/
  skip_dataset ="N"
  /* assign (latest) default if not supplied at dataset level */
  if tvolume = "" then do
     tvolume = default_tvol
  end

  if tvolume = "" then do
     tvol_no = 2
  end
  else do
     /* attempt to locate chosen volume */
     l = 2
     do while l <= volumes.0 & tvolume /= volume.l
        l = l + 1
     end
     if tvolume = volume.l then do
        tvol_no = l
     end
     else do
     /* skip if volume supplied at default level is in error */
        if datarec_tvol_available = "Y" then do
          say "ERROR      :Dataset "dataset" Volume "tvolume  ,
              "not found in list;dataset skipped - ACTION REQUIRED!"
          queue "ERROR      :Dataset "dataset" Volume "tvolume  ,
              "not found in list;dataset skipped - ACTION REQUIRED!"
          "EXECIO 1 DISKW ERRLOG"
          skip_dataset = "Y"
        end
        else do
          say   "WARNING    :Volume "tvolume" not found",
              "in VOLUME list... replaced with FIRST volume"
          queue "WARNING    :Volume "tvolume" not found",
              "in VOLUME list... replaced with FIRST volume"
          "EXECIO 1 DISKW ERRLOG"

          tvol_no = 2
        end
     end
  end

  if skip_dataset = "N" then do

    /*find a volume with space -                     */
    /* look on or after chosen volume, else try above */
    chosen_vol_no = tvol_no

    /* skip if volume supplied at data rec level is in error */
    if SYSBYTES > (sizegb.tvol_no - used.tvol_no) then do
       if datarec_tvol_available = "Y" then do
         say "ERROR      :Dataset "dataset" Volume "volume.tvol_no,
             "is FULL... dataset skipped - ACTION REQUIRED!"
         queue "ERROR      :Dataset "dataset" Volume "volume.tvol_no,
             "is FULL... dataset skipped - ACTION REQUIRED!"
       "EXECIO 1 DISKW ERRLOG"
        skip_dataset = "Y"
       end
       else do
          queue "ERROR      :Dataset "dataset" Volume "volume.tvol_no,
                "is FULL... replaced with LAST volume"
          "EXECIO 1 DISKW ERRLOG"
          tvol_no = volumes.0
     end
    end
  end

  if skip_dataset = "N" then do

    do while SYSBYTES > (sizegb.tvol_no - used.tvol_no),
             & tvol_no <= volumes.0
           tvol_no = tvol_no + 1
    end

    if tvol_no > volumes.0 then do
       queue "WARNING    :"dataset,
            "too big for available volumes of this size or below",
            "trying earlier volumes!"
       "EXECIO 1 DISKW ERRLOG"
       /* try earlier volumes */
       tvol_no = 2
       do while SYSBYTES > (sizegb.tvol_no - used.tvol_no),
                                            & tvol_no <= chosen_vol_no
          tvol_no = tvol_no + 1
       end
       if tvol_no > chosen_vol_no then do
            say "ERROR      :Dataset "dataset"too big for",
               "available volumes;dataset skipped - ACTION REQUIRED!"
          queue "ERROR      :Dataset "dataset"too big for",
               "available volumes;dataset skipped - ACTION REQUIRED!"
          "EXECIO 1 DISKW ERRLOG"
          skip_dataset = "Y"
       end
    end
    else do
       if SYSBYTES > (sizegb.tvol_no - used.tvol_no) then do
          /*SHOULD NEVER HAPPEN */
          queue "ERROR      :Dataset "dataset" Volume "volume.tvol_no,
                "is FULL... replaced with LAST volume"
          "EXECIO 1 DISKW ERRLOG"
          tvol_no = volumes.0
       end
    end

  end

  /* write info on chosen volume */
  if skip_dataset = "N" then do
     queue "INFORMATION:Dataset "dataset" Volume ",
                   volume.tvol_no" allocated."
        "EXECIO 1 DISKW ERRLOG"
     /*adjust USED SPACE in chosen volume*/
     used.tvol_no = used.tvol_no + SYSBYTES
     /*Increment SPACE in chosen volume*/
     files.tvol_no = files.tvol_no + 1
  end

RETURN


DOLISTDSI:
/*****************************************************/
/* DO LISTDSI  FOR NON VSAM FILES                    */
/*****************************************************/
  RC = LISTDSI("'"dataset"'" "SMSINFO MULTIVOL REcall")
  if RC <= 4 then do
    if SYSUNIT = "TAPE" then do
        SYSBYTES = 4000000000
    end
    else do
  /* assume SYSUNIT=3390 & 56,664 bytes per trk(3380 = 80% (47,476))*/
      select
        when SYSUNITS = "TRACK" then do
          SYSBYTES = 56664 * SYSALLOC
        end
        when SYSUNITS = "CYLINDER" then do
          SYSBYTES = 56664 * 15 * SYSALLOC
        end
        when SYSUNITS = "BLOCK" then do
          SYSBYTES = SYSBLKSIZE * SYSALLOC
        end
        otherwise do
          queue "ERROR          :Dataset "dataset"  SYSUNITS:"SYSUNITS,
                       " Unknown space unit;cannot calculate size"
          "EXECIO 1 DISKW ERRLOG"
          skip_dataset = "Y"
        end
      end
    end
  end
  else do
    queue "ERROR            :Dataset "dataset"  Information",
          "unavailable"
    queue "                  SYSREASON : "SYSREASON
    "EXECIO 2 DISKW ERRLOG"
    skip_dataset = "Y"
  end

RETURN


LISTCAT:
/*****************************************************/
/* do LISTCAT and trap                               */
/*****************************************************/
  X=outtrap('line.')
  address TSO "LISTCAT ENTRIES ('"dataset"' ) ALL "
  X=outtrap('OFF')
  rec_total = 0
  cum_high_rba = 0

  /* parse variable                                  */
  DO k=1 TO line.0

    select
       when substr(line.k,1,8) = 'CLUSTER' then do
         dsn = substr(line.k,17)
       end
       when substr(line.k,8,6) = 'KEYLEN' then do
         keylen = strip(substr(line.k,27,5),,'-')
       end
       when substr(line.k,8,3) = 'RKP' then do
         rkp = strip(substr(line.k,27,5),,'-')
         if maxlrecl = "MAXLRECL" then
           do
              maxlrecl = strip(substr(line.k,56,5),,'-')
           end
       end
       when substr(line.k,8,9) = 'REC-TOTAL' then do
         rec_total = strip(substr(line.k,27,5),,'-')
       end
       when substr(line.k,8,10) = 'SPACE-TYPE' then do
         space_type = strip(substr(line.k,27,5),,'-')
       end
       when substr(line.k,8,9) = 'SPACE-PRI' then do
         space_pri = strip(substr(line.k,27,5),,'-')
       end
       when substr(line.k,8,9) = 'SPACE-SEC' then do
         space_sec = strip(substr(line.k,27,5),,'-')
       end

       when substr(line.k,8,6) = 'VOLSER' then do
         volser = strip(substr(line.k,26,6),,'-')
       end
       when substr(line.k,37,8) = 'HIGH-RBA' then do
         high_rba = strip(substr(line.k,46,15),,'-')
         cum_high_rba = cum_high_rba + high_rba
       end
       otherwise do
          NOP
       end
    end
  end

  SYSDSNAME = ""
  SYSVOLUME = ""
  SYSUNIT = ""
  SYSDSORG = dsorg
  SYSRECFM = ""
  SYSLRECL = ""
  SYSBLKSIZE = ""
  SYSKEYLEN = ""
  SYSALLOC = ""
  SYSUSED = ""
  SYSUSEDPAGES = ""
  SYSPRIMARY = space_pri
  SYSSECONDS = space_sec
  SYSUNITS = space_type
  SYSEXTENTS = ""
  SYSCREATE = ""
  SYSREFDATE = ""
  SYSEXDATE = ""
  SYSPASSWORD = ""
  SYSRACFA = ""
  SYSUPDATED = ""
  SYSTRKSCYL = ""
  SYSBLKSTRK = ""
  SYSADIRBLK = ""
  SYSUDIRBLK = ""
  SYSMEMBERS = ""
  SYSREASON = ""
  SYSMSGLVL1 = ""
  SYSMSGLVL2 = ""
  SYSDSSMS = ""
  SYSDATACLASS = ""
  SYSSTORCLASS = ""
  SYSMGMTCLASS = ""
  SYSDSNAME = dsn
  SYSKEYLEN = keylen
  SYSLRECL = maxlrecl
  SYSUNITS = space_type
  SYSPRIMARY = space_pri
  SYSSECONDS = space_sec
  SYSVOLUME = volser
  /*SYSBYTES = rec_total * maxlrecl*/
  SYSBYTES = cum_high_rba

RETURN


CREATE_EXECS:
/*****************************************************/
/* PROCESS THE VARIOUS TYPES OF INPUT DSN            */
/*****************************************************/

  if SYSUNIT = "3390" then do
    SYSUNIT="SYSDA"
  end

  select

    when SYSDSORG = "VSAM"  then do
      call EXEC_VSAM
      call STORE_VSAM
    end
    when SYSDSORG = "PS" then do
      call EXEC_PS
    end
    when SYSDSORG = "PO" & SYSDSSMS = "PDS" then do
      call EXEC_PDS
    end
    when ((SYSDSORG = "PO") &,
        (SYSDSSMS = "DATA_LIBRARY",
         |SYSDSSMS = "PROGRAM_LIBRARY",
         |SYSDSSMS = "LIBRARY",
         |SYSDSSMS = "PDSE")) then do
      call EXEC_PDSE
    end
    otherwise do
      skip_dataset = "Y"
      queue "ERROR      :Dataset "dataset "with SYSDSORG:" SYSDSORG,
      ",SYSDSSMS:", SYSDSSMS " skipped - ACTION REQUIRED!"
      say "ERROR      :Dataset "dataset "with SYSDSORG:" SYSDSORG,
      ",SYSDSSMS:", SYSDSSMS " skipped - ACTION REQUIRED!"
      "EXECIO 1 DISKW ERRLOG"
    end

  end

  call STORE_SMSSC
  call STORE_SMSMC
  call STORE_SMSDC

RETURN


/******************************************************/
/* SAVE DETAILS OF FILE (multi-row)                   */
/******************************************************/
UPDATE_DETAILS:

  det.1  = "============================"
  det.2  = "SYSDSNAME    :"SYSDSNAME
  det.3  = "SYSVOLUME    :"SYSVOLUME
  det.4  = "SYSUNIT      :"SYSUNIT
  det.5  = "SYSDSORG     :"SYSDSORG
  det.6  = "SYSRECFM     :"SYSRECFM
  det.7  = "SYSLRECL     :"SYSLRECL
  det.8  = "SYSBLKSIZE   :"SYSBLKSIZE
  det.9  = "SYSKEYLEN    :"SYSKEYLEN
  det.10 = "SYSALLOC     :"SYSALLOC
  det.11 = "SYSUSED      :"SYSUSED
  det.12 = "SYSUSEDPAGES :"SYSUSEDPAGES
  det.13 = "SYSPRIMARY   :"SYSPRIMARY
  det.14 = "SYSSECONDS   :"SYSSECONDS
  det.15 = "SYSUNITS     :"SYSUNITS
  det.16 = "SYSEXTENTS   :"SYSEXTENTS
  det.17 = "SYSCREATE    :"SYSCREATE
  det.18 = "SYSREFDATE   :"SYSREFDATE
  det.19 = "SYSEXDATE    :"SYSEXDATE
  det.20 = "SYSPASSWORD  :"SYSPASSWORD
  det.21 = "SYSRACFA     :"SYSRACFA
  det.22 = "SYSUPDATED   :"SYSUPDATED
  det.23 = "SYSTRKSCYL   :"SYSTRKSCYL
  det.24 = "SYSBLKSTRK   :"SYSBLKSTRK
  det.25 = "SYSADIRBLK   :"SYSADIRBLK
  det.26 = "SYSUDIRBLK   :"SYSUDIRBLK
  det.27 = "SYSMEMBERS   :"SYSMEMBERS
  det.28 = "SYSREASON    :"SYSREASON
  det.29 = "SYSMSGLVL1   :"SYSMSGLVL1
  det.30 = "SYSMSGLVL2   :"SYSMSGLVL2
  det.31 = "SYSDSSMS     :"SYSDSSMS
  det.32 = "SYSDATACLASS :"SYSDATACLASS
  det.33 = "SYSSTORCLASS :"SYSSTORCLASS
  det.34 = "SYSMGMTCLASS :"SYSMGMTCLASS
  det.35 = "SYSBYTES     :"SYSBYTES
  det.36 = "T/PORT VOLUME:"volume.tvol_no

  "EXECIO * DISKW DETLS (STEM det. "
RETURN


ADD_CSV_HEADERS:
  queue    "SYSDSNAME,",
           "SYSVOLUME,",
           "SYSUNIT,",
           "SYSDSORG,",
           "SYSRECFM,",
           "SYSLRECL,",
           "SYSBLKSIZE,",
           "SYSKEYLEN,",
           "SYSALLOC,",
           "SYSUSED,",
           "SYSUSEDPAGES,",
           "SYSPRIMARY,",
           "SYSSECONDS,",
           "SYSUNITS,",
           "SYSEXTENTS,",
           "SYSCREATE,",
           "SYSREFDATE,",
           "SYSEXDATE,",
           "SYSPASSWORD,",
           "SYSRACFA,",
           "SYSUPDATED,",
           "SYSTRKSCYL,",
           "SYSBLKSTRK,",
           "SYSADIRBLK,",
           "SYSUDIRBLK,",
           "SYSMEMBERS,",
           "SYSREASON,",
           "SYSMSGLVL1,",
           "SYSMSGLVL2,",
           "SYSDSSMS,",
           "SYSDATACLASS,",
           "SYSSTORCLASS,",
           "SYSMGMTCLASS,",
           "SYSBYTES,",
           "T/PORT VOL"
     queue ""

     "EXECIO 2 DISKW CSV"
RETURN


/******************************************************/
/* SAVE DETAILS OF FILE (multi-row)                   */
/******************************************************/
ADD_CSV:
  queue   SYSDSNAME",",
          SYSVOLUME",",
          SYSUNIT",",
          SYSDSORG",",
          SYSRECFM",",
          SYSLRECL",",
          SYSBLKSIZE",",
          SYSKEYLEN",",
          SYSALLOC",",
          SYSUSED",",
          SYSUSEDPAGES",",
          SYSPRIMARY",",
          SYSSECONDS",",
          SYSUNITS",",
          SYSEXTENTS",",
          SYSCREATE",",
          SYSREFDATE",",
          SYSEXDATE",",
          SYSPASSWORD",",
          SYSRACFA",",
          SYSUPDATED",",
          SYSTRKSCYL",",
          SYSBLKSTRK",",
          SYSADIRBLK",",
          SYSUDIRBLK",",
          SYSMEMBERS",",
          SYSREASON",",
          SYSMSGLVL1",",
          SYSMSGLVL2",",
          SYSDSSMS",",
          SYSDATACLASS",",
          SYSSTORCLASS",",
          SYSMGMTCLASS",",
          SYSBYTES",",
          volume.tvol_no

     "EXECIO 1 DISKW CSV"
RETURN


EXEC_VSAM:
/******************************************************/
/* EXEC PROCs for VSAM                                */
/******************************************************/
  if VSAMalready /= true then do
    jobcard_source.1 = overlay("EV",jobcard_source.1,9)
    jobcard_popup.1 = overlay("IV",jobcard_popup.1,9)

    "EXECIO * DISKW VSAMEXP (STEM jobcard_source. "
    "EXECIO * DISKW VSAMEXP (STEM vsamexp. "
    "EXECIO * DISKW VSAMIMP (STEM jobcard_popup. "
    "EXECIO * DISKW VSAMIMP (STEM vsamimp. "
    VSAMStepNo = 1

    VSAMalready = true
  end
  else do
    VSAMStepNo = VSAMStepNo + 1
  end

  if SYSUNITS = "TRACK" then do
    spc_units = "TRK"
  end
  else do
    spc_unats = SYSUNITS
  end


  SPC = "'("spc_units",("SYSPRIMARY","SYSSECONDS"),RLSE)'"

  queue "//STEP"VSAMStepNo" EXEC PROC=ZEXPVSAM,"
  queue "//            SRCVOL="SYSVOLUME","
  queue "//            TRANVOL="volume.tvol_no","
  queue "//            TRANUNIT="xunit.tvol_no","
  queue "//            VSAMIN="SYSDSNAME","
  queue "//            VSAMTRAN="DIFDSNAME","
  queue "//            SPC="SPC

  "EXECIO 7 DISKW VSAMEXP"

  if smsenv = "N"     then do
    /* multi volume enclose with brackets */
    popvol1 = space(popvol,0)
    popvol1 = strip(popvol1)
    popvol1 = "("popvol1")"

    queue "//STEP"VSAMStepNo" EXEC PROC=ZIMPVSM,"
    queue "//            TRANVOL="volume.tvol_no","
    queue "//            TRANUNIT="xunit.tvol_no","
    queue "//            POPVOL="popvol1","
    queue "//            VSAMTRAN="DIFDSNAME","
    queue "//            VSAMOUT="SYSDSNAME

    "EXECIO 6 DISKW VSAMIMP"
  end
  else do
    queue "//STEP"VSAMStepNo" EXEC PROC=ZSIMPVSM,"
    queue "//            TRANVOL="volume.tvol_no","
    queue "//            TRANUNIT="xunit.tvol_no","
    queue "//            MGMTCLNM="smsmc","
    queue "//            STOCLNM="smssc","
    queue "//            VSAMTRAN="DIFDSNAME","
    queue "//            VSAMOUT="SYSDSNAME

    "EXECIO 7 DISKW VSAMIMP"
  end

RETURN


EXEC_PDS:
/******************************************************/
/* EXEC PROCs for PDS                                 */
/******************************************************/
  if PDSalready /= true then do
    jobcard_source.1 = overlay("EP",jobcard_source.1,9)
    jobcard_popup.1 = overlay("IP",jobcard_popup.1,9)

    "EXECIO * DISKW PDSEXP (STEM jobcard_source. "
    "EXECIO * DISKW PDSEXP (STEM pdsexp. "
    "EXECIO * DISKW PDSIMP (STEM jobcard_popup. "
    "EXECIO * DISKW PDSIMP (STEM pdsimp. "
    PDSStepNo = 1

    PDSalready = true
  end
  else do
    PDSStepNo = PDSStepNo + 1
  end

  if SYSUNITS = "TRACK" then do
    spc_units = "TRK"
  end
  else do
    spc_units = SYSUNITS
  end

  if smsdc = "" then do
    smsdc = "DCPDS"
  end

  /* SPACE CALCULATIONS FOR TAPE ? */
  /*SPC = "'("spc_units",("SYSPRIMARY","SYSSECONDS"),RLSE)'"*/

  queue "//STEP"PDSStepNo" EXEC PROC=ZCPYPDS,"
  queue "//           SRCVOL="SYSVOLUME","
  queue "//           SRCUNIT="SYSUNIT","
  queue "//           TARGVOL="volume.tvol_no","
  queue "//           TARGUNIT="xunit.tvol_no","
  queue "//           PDSIN="SYSDSNAME","
  queue "//           PDSOUT="DIFDSNAME

  "EXECIO 7 DISKW PDSEXP"


  if smsenv="N" then do
    /* multi volume not allowed in PDSE,uses the first volume  */
    parse var popvol popvol1 "," remainpopvol
    popvol1 = strip(popvol1)
    if remainpopvol /= ""  then do
      queue "WARNING    :Dataset "dataset" with PO organization",
          " is not eligible for multi-volume allocation;"
      queue "            First POPVOL "popvol1" allocated."
      "EXECIO 2 DISKW ERRLOG"
    end
    queue "//STEP"PDSStepNo" EXEC PROC=ZCPYPDS,"
    queue "//           SRCVOL="volume.tvol_no","
    queue "//           SRCUNIT="xunit.tvol_no","
    queue "//           TARGVOL="popvol1","
    queue "//           TARGUNIT="SYSUNIT","
    queue "//           PDSIN="DIFDSNAME","
    queue "//           PDSOUT="SYSDSNAME

    "EXECIO 7 DISKW PDSIMP"
  end
  else do
    queue "//STEP"PDSStepNo" EXEC PROC=ZSCPYPDS,"
    queue "//           SRCVOL="volume.tvol_no","
    queue "//           SRCUNIT="xunit.tvol_no","
    queue "//           STOCLNM="smssc","
    queue "//           MGMTCLNM="smsmc","
    queue "//           DATACLNM="smsdc","
    queue "//           PDSIN="DIFDSNAME","
    queue "//           PDSOUT="SYSDSNAME

    "EXECIO 8 DISKW PDSIMP"
  end

  SYSSTORCLASS = smssc
  SYSMGMTCLASS = smsmc
  SYSDATACLASS = smsdc
RETURN


EXEC_PDSE:
/******************************************************/
/* EXEC PROCs for PDSE                                */
/******************************************************/
  if PDSEalready /= true then do
    jobcard_source.1 = overlay("EE",jobcard_source.1,9)
    jobcard_popup.1 = overlay("IE",jobcard_popup.1,9)

    "EXECIO * DISKW PDSEEXP (STEM jobcard_source. "
    "EXECIO * DISKW PDSEEXP (STEM pdseexp. "
    "EXECIO * DISKW PDSEIMP (STEM jobcard_popup. "
    "EXECIO * DISKW PDSEIMP (STEM pdseimp. "
    PDSEStepNo = 1

    PDSEalready = true
  end
  else do
    PDSEStepNo = PDSEStepNo + 1
  end

  if smsdc = "" then do
    smsdc = "DCPDSE"
  end
  queue "//STEP"PDSEStepNo" EXEC PROC=ZCPYPDSE,"
  queue "//            SRCVOL="SYSVOLUME","
  queue "//            SRCUNIT="SYSUNIT","
  queue "//            TARGVOL="volume.tvol_no","
  queue "//            TARGUNIT="xunit.tvol_no","
  queue "//            PDSEIN="SYSDSNAME","
  queue "//            PDSEOUT="DIFDSNAME

  "EXECIO 7 DISKW PDSEEXP"

  if smsenv="N" then do
    /* multi volume not allowed in PDSE,uses the first volume  */
    parse var popvol popvol1 "," remainpopvol
    popvol1 = strip(popvol1)
    if remainpopvol /= ""  then do
      queue "WARNING    :Dataset "dataset" with PO organization",
          " is not eligible for multi-volume allocation;"
      queue "            First POPVOL "popvol1" allocated."
      "EXECIO 2 DISKW ERRLOG"
    end
    queue "//STEP"PDSEStepNo" EXEC PROC=ZCPYPDSE,"
    queue "//            SRCVOL="volume.tvol_no","
    queue "//            SRCUNIT="xunit.tvol_no","
    queue "//            TARGVOL="popvol1","
    queue "//            TARGUNIT="SYSUNIT","
    queue "//            PDSEIN="DIFDSNAME","
    queue "//            PDSEOUT="SYSDSNAME

    "EXECIO 7 DISKW PDSEIMP"
  end
  else do
    queue "//STEP"PDSEStepNo" EXEC PROC=ZSCPPDSE,"
    queue "//            SRCVOL="volume.tvol_no","
    queue "//            SRCUNIT="xunit.tvol_no","
    queue "//            STOCLNM="smssc","
    queue "//            MGMTCLNM="smsmc","
    queue "//            DATACLNM="smsdc","
    queue "//            PDSEIN="DIFDSNAME","
    queue "//            PDSEOUT="SYSDSNAME

    "EXECIO 8 DISKW PDSEIMP"
  end

  SYSSTORCLASS = smssc
  SYSMGMTCLASS = smsmc
  SYSDATACLASS = smsdc
RETURN


EXEC_PS:
/******************************************************/
/* EXEC PROCs for PS                                  */
/******************************************************/
  if PSalready /= true then do
    jobcard_source.1 = overlay("ES",jobcard_source.1,9)
    jobcard_popup.1 = overlay("IS",jobcard_popup.1,9)

    "EXECIO * DISKW PSEXP (STEM jobcard_source. "
    "EXECIO * DISKW PSEXP (STEM psexp. "
    "EXECIO * DISKW PSIMP (STEM jobcard_popup. "
    "EXECIO * DISKW PSIMP (STEM psimp. "
    PSStepNo = 1

    PSalready = true
  end
  else do
    PSStepNo = PSStepNo + 1
  end

  if smsdc = "" then do
    smsdc = "DCSEQ"
  end

  queue "//STEP"PSStepNo" EXEC PROC=ZCPYPS,"
  queue "//          SRCVOL="SYSVOLUME","
  queue "//          SRCUNIT="SYSUNIT","
  queue "//          TARGVOL="volume.tvol_no","
  queue "//          TARGUNIT="xunit.tvol_no","
  queue "//          PSIN="SYSDSNAME","
  queue "//          PSOUT="DIFDSNAME

  "EXECIO 7 DISKW PSEXP"

  if smsenv="N" then do
    /* multi volume enclose with brackets */
    popvol1 = space(popvol,0)
    popvol1 = strip(popvol1)
    popvol1 = "("popvol1")"

    queue "//STEP"PSStepNo" EXEC PROC=ZCPYPS,"
    queue "//          SRCVOL="volume.tvol_no","
    queue "//          SRCUNIT="xunit.tvol_no","
    queue "//          TARGVOL="popvol1","
    queue "//          TARGUNIT="sysunit","
    queue "//          PSIN="DIFDSNAME","
    queue "//          PSOUT="SYSDSNAME

    "EXECIO 7 DISKW PSIMP"
  end
  else do
    queue "//STEP"PSStepNo" EXEC PROC=ZSCPYPS,"
    queue "//          SRCVOL="volume.tvol_no","
    queue "//          SRCUNIT="xunit.tvol_no","
    queue "//          STOCLNM="smssc","
    queue "//          MGMTCLNM="smsmc","
    queue "//          DATACLNM="smsdc","
    queue "//          PSIN="DIFDSNAME","
    queue "//          PSOUT="SYSDSNAME

    "EXECIO 8 DISKW PSIMP"
  end

  SYSSTORCLASS = smssc
  SYSMGMTCLASS = smsmc
  SYSDATACLASS = smsdc
RETURN


PROCESS_TRANSPORT_VOLUMES:
/*****************************************************/
/* TRANSPORT VOLUMES                                 */
/*****************************************************/
  defaultJCL =  "'"install".REXX(VOLUMES)'"
  if SYSDSN(defaultJCL) /= OK THEN
  do
     say "ERROR:" defaultJCL "DOES NOT EXIST"
     EXIT(4)
  end
  "ALLOCATE FI(JCLS) DA("defaultJCL") SHR"

  "EXECIO * DISKR JCLS (STEM volumes. FINIS"

  "FREE FI(JCLS)"

   sizegb. = 0
   used. = 0

  /* NOTE.  First row is a HEADER row !              */
  do i = 2 TO volumes.0
     parse var volumes.i volume.i remainder
     parse var remainder xunit.i remainder
     parse var remainder sizegb.i remainder
     parse var remainder files.i remainder
     parse var remainder used.i remainder

     sizegb.i = sizegb.i * 1000000000
  end
RETURN


STORE_VSAM:
/*****************************************************/
/* SAVE VSAM SMS PARAMETERS                          */
/*****************************************************/
  /* VSAM ONLY */
  /* save SMSDATACLASS/SYSSTORCLASS/SYSMGMTCLASS for SMS Discovery */
  vsam_dsn.0 = vsam_dsn.0 + 1
  l = vsam_dsn.0
  vsam_dsn.l = SYSDSNAME
  vsam_datacl.l = SYSDATACLASS
  vsam_storcl.l = SYSSTORCLASS
  vsam_mgmtcl.l = SYSMGMTCLASS

RETURN


STORE_SMSSC:
/*****************************************************/
/* SAVE SMS PARAMETER - STORAGE CLASS                */
/*****************************************************/
  /* save SMSSTORCLASS for SMS Discovery                             */
  /* ( default value/SCBASE + any specifically requested             */
  if SYSSTORCLASS /= "" then do
     l = 1
     do while l <= saved_smssc.0 & SYSSTORCLASS <> saved_smssc.l
        l = l + 1
     end
     if l > saved_smssc.0 then do
        saved_smssc.0 = saved_smssc.0 + 1
        saved_smssc.l = SYSSTORCLASS
     end
  end
RETURN


STORE_SMSMC:
/*****************************************************/
/* SAVE SMS PARAMETER - MANAGEMENT CLASS             */
/*****************************************************/
  /* save SMSSTORCLASS for SMS Discovery                             */
  /* ( default value/SCBASE + any specifically requested             */
  if SYSMGMTCLASS /= "" then do
     l = 1
     do while l <= saved_smsmc.0 & SYSMGMTCLASS <> saved_smsmc.l
        l = l + 1
     end
     if l > saved_smsmc.0 then do
        saved_smsmc.0 = saved_smsmc.0 + 1
        saved_smsmc.l = SYSMGMTCLASS
     end
  end
RETURN


STORE_SMSDC:
/*****************************************************/
/* SAVE SMS PARAMETER - DATA CLASS                   */
/*****************************************************/
  /* save SMSDATACLASS for SMS Discovery                             */
  /* ( defaulted values for PDS/SEQ/etc + any specifically requested */

  if SYSDATACLASS /= "" then do
     l = 1
     do while l <= saved_smsdc.0 & SYSDATACLASS <> saved_smsdc.l
        l = l + 1
     end
     if l > saved_smsdc.0 then do
        saved_smsdc.0 = saved_smsdc.0 + 1
        saved_smsdc.l = SYSDATACLASS
     end
  end
RETURN


